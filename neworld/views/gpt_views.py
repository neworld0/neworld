from django.contrib import messages
from django.contrib.auth.decorators import login_required, permission_required
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
from django.core.paginator import Paginator
from django.db.models import Q, Count
from django.urls import reverse_lazy
from django.contrib.auth.models import User
from ..models import Gpt
from ..forms import GptForm

from pyChatGPT import ChatGPT

# session_token = 'eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..q6xEndir_bVFHrqL.1fF4MhBf4jhQuWOUd-4H3GxRDci7-pncMPuL_hh7L9XshdGqESmgzBXzhTdIuPv3Dcoy5j-rir0s5RnWEJwCTzL5sSsZeINWnc-Bs96hnvloC1QRjXqxh_izk7-GOF-ljBwg8pCDfY3EYNIWcW7kl--nCf2rCqzQla4ZFBZPPUnfQG9NHbXAPPjYMk-moOmXujTKvR1WVgYxP268kMf-13GBOvSSSG5nDspGEXEg83sq7L_L64cdnLLPPiSiiTohetyPceXoE3yb1DSi1z1BRPOIw9gahzE1GIH0GP08aKNWkYSTt5k74Ralt3hhuiOuzeBJGl2u-wDo22QyghLxcFsrPmgdQzPV1XZFsKuRRZyRWdueuzBJ2U1LcbtsfxPJW1OG4pNTvBsmal2KTsQMNRusVLO0ffq1Mzmk7De4Eld9hiRFi40jmoS4owDvd2YTJRx0yssYs2loDylnzys581RDJM70dFK44WgkM0IvhYi09tBR10zZuOChMg7Ab23oFS6osRiTcr_nOWOLenHPPhHNMsEQZhNALGjit8KYjCcFpPjB-cmPao1Hr6bwbdzX4rYLDnXKL8q4tX8U8F0FUTp9Bq0XjAw4ix46oT8NMY35TJr0EcyNVmUDaXBevC3mRTAuyloG4aHBaK_ZOisfmaQ59GibkJf4mHTKIkuWhGKZ4mEH5_fT5Q4JEtD5MU7QIyZz7zIa_7wVM09x4RhrQkDM3FJq9PtoWSRCIYRSYxMdpUgSQCgW0eel8cTuf7SsZsUk04_mDaW51eZulRqcl24aT9WIUEepiw6t0UqsSGvuPfs1K1MyStwZl_xycNUqHfXy6Thf-lgV-8GQQnXYl5IAYi95Ig89KGPuvcHzGA16eJSTz2XZ63sNnyl0AEFCZ2ZmS98roaKnEpY7vo4u5n0S0G6g38haxWqsJ6lNR_zb5kUD9r1PfGztGDI4H7c8aJ1sGpJJACm6pxSiOl8VZjcSFg-uJT1XLD_i-578_g-lQz7SHweKsGJANAnzRAyyXKTnJBS3CXrLuUNiXH454bcFyYnskzRy6voZo3oyfvpYzyGX11HTaXa-MgBwsGYdmBfzfi6E_BqsXd_3iv-Q4RnAvKFxD569yLapaFBG9iZs9YiU53uwf9BhNoAVUrmKflThhbdhjUaX5TG0Vx4dL3pqsURTcvIvLwDoiUrM1hbGY3s3AZQwXZCEKj6F0pfCs7jCbDB7AI39rBqHm-u5OZlaW2Su8Yhc_1DDE5wQ41KjwraowQXkZ4NH2XJxNBxuuwp0-pKOA52g2ZZcyLgShakNUCc_-xu21U40dB-uuWx7PfP1vu3lzjoOMQFZ9F7pMUixQYBSqeMsy03djtHMTPGUUsgytvp6STKv9ChMFolu-Rhyr5PBcJAZU_pvo6UpFeiQlfMVRqRZXaM3Muk4CL_RYsy9P-5t4xJh7crqyBDwPA1D-zGlSUmZRSxs0Y7uEhfl1QyCrfaQuudVAg9XAtjy91R2gULRntlIofjkKVZfIG7NIWvIRWRwUsaUjNLaNgtgcHq4JrPTYVwO_jUpV13DDP2_PDsmcpeUyRc1J00Ms3364ud5sBJ_E0hTTNN5jvvZ4ooHfCYsy87OCMKVW5fbG-7dxNGv4SyH5iW7Ge3xZ7PrKoee6WurL7mstNLNsBsFXDACTpJLmZba8MJ7Q19t0LlCCa1SuXQjtDYa633kecyx3Rbtjm262RX4Vh8rgbmt9FvetwzA_jzBjr8bcYB6WBWg_0kJDuCg7pDrqcwslMZpofdIEJzAG2sCKjmfxH366xI0WUXGA4ipdU2nLcy7F08VY-2TdXVdU8fScFFq4VHllT3iQN9OpW3VazwJPDaeeVsEtNw9rZ1hQ0JUtL5z5Y7txYRcJIwJYK-MX-1LMA00zQxtk_R1Dytbn_QKrjuZpFDkc79k3A220QRFIcfGHJQzkczGBXoLLDVKVJgGWcm0qH4ZrYWsc7lP9JkEvd5eMXjTduKA899F-nHHXSRkmEDqp6ffHTS5qcUg07YjiUMe_mwu5_rqtcTipChjpN_0fYGMIK7YoB3NTAtpdMuz3JL2N5S2K1w9WGCqTxPIVlQzYqSRkYiJdHkq8mXo7ucQaeUj8jmRnC3TD1-wR5CwGFn00heKveHqzvpamWNmrE1etBgZsmJHqs7-rBDXIhe7PA0YMyUehAjdTzIpf1-bfZzBbAzVHRm9YiKVtUYqoksuJQQ0lRTXGPrCVshKFCGL9LnKk_dBvUupNl6iKBjW.zcVTXu3GZB6wr5tUg32t4Q'  # `__Secure-next-auth.session-token` cookie from https://chat.openai.com/chat
# api = ChatGPT(session_token)  # auth with session token
# api = ChatGPT(session_token, conversation_id='some-random-uuid')  # specify conversation id
# api = ChatGPT(session_token, proxy='http://proxy.example.com:8080')  # specify proxy
# api = ChatGPT(auth_type='google', email='neworld0@gmail.com', password='2tjdudEgjs!')  # auth with google login
# api = ChatGPT(session_token, moderation=False)  # disable moderation
# api = ChatGPT(session_token, window_size=(1024, 768))  # specify window size
# api = ChatGPT(session_token, verbose=True)  # verbose mode (print debug messages)

# login with openai and solve simple reCAPTCHA automatically, but you should reCAPTCHA by yourself,
# it does not work on server without GUI.
# api = ChatGPT(auth_type='openai', email='example@xxx.com', password='password', verbose=True)
# login with openai and solve simple reCAPTCHA automatically, while pass reCAPTCHA enterprise with 2captcha API,
# it works on server without GUI.
# api = ChatGPT(auth_type='', email='neworld0@gmail.com', password='2tjdudEgjs!',
#               twocaptcha_apikey='2captcha_apikey',
#               verbose=True)
# reuse cookies generated by successful login before login,
# if `login_cookies_path` does not exist, it will process logining  with `auth_type`, and save cookies to `login_cookies_path`
# only works when `auth_type` is `openai` or `google`
# api = ChatGPT(auth_type='openai', email='example@xxx.com', password='password',
#               login_cookies_path='your_cookies_path',
#               verbose=True)


# resp = api.send_message('How can I use ChatGPT API?')
# print(resp['message'])

# api.reset_conversation()  # reset the conversation
# api.clear_conversations()  # clear all conversations
# api.refresh_chat_page()  # refresh the chat page


# 화면 출력
# @login_required(login_url='common:login')
# @permission_required('views.permission_view', login_url=reverse_lazy('neworld:goldmembership_guide'))
# def gpt(request):
#     context = {'resp': resp['message']}
#     return render(request, 'neworld/gpt_list.html', context)


# 게시판 목록 출력
@login_required(login_url='common:login')
# @permission_required('views.permission_view', login_url=reverse_lazy('neworld:goldmembership_guide'))
def gpt(request):
    # 입력 파라미터
    page = request.GET.get('page', '1')  # 페이지
    kw = request.GET.get('kw', '')  # 검색어
    so = request.GET.get('so', 'recent')  # 정렬기준
    # 정렬
    if so == 'recommend':
        gpt_list = Gpt.objects.annotate(num_voter=Count('voter')).order_by('-num_voter', '-create_date')
    elif so == 'popular':
        gpt_list = Gpt.objects.annotate(num_answer=Count('answer')).order_by('-num_answer', '-create_date')
    else:  # recent
        gpt_list = Gpt.objects.order_by('-create_date')
    # 검색
    if kw:
        gpt_list = gpt_list.filter(
            Q(subject__icontains=kw) |  # 제목검색
            Q(content__icontains=kw) |  # 내용검색
            Q(author__first_name__icontains=kw) |  # 질문 글쓴이검색
            Q(answer__author__first_name__icontains=kw)  # 답변 글쓴이검색
        ).distinct()
    # 페이징처리
    paginator = Paginator(gpt_list, 10)  # 페이지당 10개씩 보여주기
    page_obj = paginator.get_page(page)
    context = {'gpt_list': page_obj, 'page': page, 'kw': kw, 'so': so}
    return render(request, 'neworld/gpt_list.html', context)


# Bulletin Board 상세내용 출력
@login_required(login_url='common:login')
# @permission_required('views.permission_view', login_url=reverse_lazy('neworld:goldmembership_guide'))
def gpt_detail(request, gpt_id):
    gpt_c = get_object_or_404(Gpt, pk=gpt_id)
    user = User.objects.get(username=request.user)
    groups = user.groups.all()
    group = []
    for g in groups:
        gr = g.id
        group.append(gr)
    context = {'gpt': gpt_c, 'group_list': group}
    return render(request, 'neworld/gpt_detail.html', context)


# Bulletin Board 질문등록
@login_required(login_url='common:login')
# @permission_required('views.permission_create', login_url=reverse_lazy('neworld:goldmembership_guide'))
def gpt_create(request):
    user = get_object_or_404(User, pk=request.user.id)
    groups = user.groups.all()
    if request.method == 'POST':
        form = GptForm(request.POST)
        if form.is_valid():
            gpt = form.save(commit=False)
            gpt.author = request.user  # author 속성에 로그인 계정 저장
            gpt.create_date = timezone.now()
            for group in groups:
                gpt.group = group
            gpt.save()
            return redirect('neworld:gpt')
    else:
        form = GptForm()
    context = {'form': form}
    return render(request, 'neworld/gpt_form.html', context)


# Bulletin Board 질문 수정
@login_required(login_url='common:login')
# @permission_required('views.permission_change', login_url=reverse_lazy('blog:goldmembership_guide'))
def gpt_modify(request, gpt_id):
    gpt = get_object_or_404(Gpt, pk=gpt_id)
    if request.user != gpt.author:
        messages.error(request, '수정권한이 없습니다')
        return redirect('neworld:gpt_detail', gpt_id=gpt.id)
    if request.method == "POST":
        form = GptForm(request.POST, instance=gpt)
        if form.is_valid():
            gpt = form.save(commit=False)
            gpt.modify_date = timezone.now()  # 수정일시 저장
            gpt.save()
            return redirect('neworld:gpt_detail', gpt_id=gpt.id)
    else:
        form = GptForm(instance=gpt)
    context = {'form': form}
    return render(request, 'neworld/gpt_form.html', context)


# Bulletin Board 질문 삭제
@login_required(login_url='common:login')
# @permission_required('views.permission_delete', login_url=reverse_lazy('neworld:goldmembership_guide'))
def gpt_delete(request, gpt_id):
    gpt = get_object_or_404(Gpt, pk=gpt_id)
    if request.user != gpt.author:
        messages.error(request, '삭제권한이 없습니다')
        return redirect('neworld:gpt_detail', gpt_id=gpt.id)
    gpt.delete()
    return redirect('neworld:gpt')